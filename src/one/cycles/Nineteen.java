package one.cycles;

import java.util.Scanner;

/**
 * Можно ли заданное натуральное число М представить в виде суммы
 * квадратов двух натуральных чисел?
 * Написать программу решения этой задачи
 */
public class Nineteen {
    public static void main(String[] args) {
        try (Scanner in = new Scanner(System.in)) {
            int m = in.nextInt();
            System.out.println(canBeSquared(m));
        }
    }

    /*
    решим задачу при помощи теоремы Ферма-Эйлера
    (далее по вики:)
    Любое простое число p=4n+1, где n — натуральное число, представимо в виде суммы квадратов двух натуральных чисел.
    Из этого утверждения при помощи тождества Брахмагупты выводится общее утверждение:
    Натуральное число представимо в виде суммы двух квадратов (целых чисел) тогда и только тогда,
    когда ни одно простое число вида 4k+3 не входит в его разложение на простые множители в нечётной степени.

    ещё более понятная формулировка утверждения:
    натуральное число M можно представить в виде суммы двух квадратов тогда и только тогда,
    когда в его каноническом разложении на простые множители
    все простые числа вида 4k+3 встречаются в чётных степенях
     */
    private static boolean canBeSquared(int m) {
        for (int p = 3; p * p <= m; p += 4) {//4k+3
            //ограничение корень, потому что присваиваем парный множитель оставшемуся числу
            //то есть для нас достаточно получить парный множитель
            int count = 0;
            while (m % p == 0) {//раскладываем на простые множители
                count++;//подсчитываем количество попаданий множителей типа 4k+3
                m /= p;
            }
            if (count % 2 != 0) {//необходимо чётное количество степеней
                return false;
            }
        }
        /*
        После вынесения всех множителей p<=sqrt(m) остаётся либо 1, либо простое число.
        Если оставшееся число m имеет вид 4k+3 — представление невозможно.
         */
        return m % 4 != 3;
    }
}
